ROUND ROBIN
#include <stdio.h>

typedef struct {
    int pid;            // Process ID
    int arrivalTime;    // Arrival time
    int burstTime;      // Burst time
    int remainingTime;  // Remaining burst time
    int completionTime; // Completion time
    int waitingTime;    // Waiting time
    int turnaroundTime; // Turnaround time
} Process;

void roundRobinScheduling(Process processes[], int n, int timeQuantum) {
    int currentTime = 0;       // Track the current time
    int completed = 0;         // Count of completed processes
    int queue[n];              // Queue to hold process indices
    int front = 0, rear = 0;   // Front and rear pointers for the queue
    int visited[n];            // Track if a process has been added to the queue

    // Initialize remaining time and visited array
    for (int i = 0; i < n; i++) {
        processes[i].remainingTime = processes[i].burstTime;
        visited[i] = 0;
    }

    // Start with processes that have arrived at time 0
    for (int i = 0; i < n; i++) {
        if (processes[i].arrivalTime == 0) {
            queue[rear++] = i;
            visited[i] = 1;
        }
    }

    while (completed < n) {
        if (front == rear) {
            // No process in the queue, increment time
            currentTime++;
            for (int i = 0; i < n; i++) {
                if (!visited[i] && processes[i].arrivalTime <= currentTime) {
                    queue[rear++] = i;
                    visited[i] = 1;
                }
            }
            continue;
        }

        int index = queue[front++];  // Dequeue process
        Process* p = &processes[index];

        // Execute the process for the time quantum or remaining time
        if (p->remainingTime <= timeQuantum) {
            currentTime += p->remainingTime;
            p->remainingTime = 0;
            p->completionTime = currentTime;
            p->turnaroundTime = p->completionTime - p->arrivalTime;
            p->waitingTime = p->turnaroundTime - p->burstTime;
            completed++;
        } else {
            currentTime += timeQuantum;
            p->remainingTime -= timeQuantum;
        }

        // Add newly arrived processes to the queue
        for (int i = 0; i < n; i++) {
            if (!visited[i] && processes[i].arrivalTime <= currentTime) {
                queue[rear++] = i;
                visited[i] = 1;
            }
        }

        // Re-add the current process to the queue if it is not completed
        if (p->remainingTime > 0) {
            queue[rear++] = index;
        }
    }
}

void displayProcesses(Process processes[], int n) {
    printf("PID\tAT\tBT\tCT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n",
               processes[i].pid,
               processes[i].arrivalTime,
               processes[i].burstTime,
               processes[i].completionTime,
               processes[i].waitingTime,
               processes[i].turnaroundTime);
    }
}

int main() {
    int n, timeQuantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrivalTime, &processes[i].burstTime);
    }

    printf("Enter the time quantum: ");
    scanf("%d", &timeQuantum);

    roundRobinScheduling(processes, n, timeQuantum);
    displayProcesses(processes, n);

    return 0;
}
