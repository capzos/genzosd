//producer cpp
#include <iostream>
#include <thread>
#include <mutex>
#include <semaphore.h>
#include <queue>
#include <chrono>

const int BUFFER_SIZE = 5;
std::queue<int> buffer;
std::mutex mutex;       // Mutex for critical section
sem_t empty;            // Semaphore to track empty buffer slots
sem_t full;             // Semaphore to track full buffer slots

void producer(int id) {
    int item = 0;
    while (true) {
        // Produce an item (in this case, simply an integer)
        item = rand() % 100;

        // Wait if buffer is full
        sem_wait(&empty);

        // Enter critical section
        mutex.lock();
        buffer.push(item);
        std::cout << "Producer " << id << " produced item: " << item << "\n";
        mutex.unlock();

        // Signal that buffer has one more full slot
        sem_post(&full);

        // Simulate time delay for producing the next item
        std::this_thread::sleep_for(std::chrono::milliseconds(1000));
    }
}

void consumer(int id) {
    int item;
    while (true) {
        // Wait if buffer is empty
        sem_wait(&full);

        // Enter critical section
        mutex.lock();
        item = buffer.front();
        buffer.pop();
        std::cout << "Consumer " << id << " consumed item: " << item << "\n";
        mutex.unlock();

        // Signal that buffer has one more empty slot
        sem_post(&empty);

        // Simulate time delay for consuming the next item
        std::this_thread::sleep_for(std::chrono::milliseconds(1500));
    }
}

int main() {
    // Initialize semaphores
    sem_init(&empty, 0, BUFFER_SIZE);  // Start with all slots empty
    sem_init(&full, 0, 0);             // Start with no full slots

    // Create producer and consumer threads
    std::thread producers[2], consumers[2];
    for (int i = 0; i < 2; ++i) {
        producers[i] = std::thread(producer, i+1);
        consumers[i] = std::thread(consumer, i+1);
    }

    // Join threads (not reached in this example as threads run indefinitely)
    for (int i = 0; i < 2; ++i) {
        producers[i].join();
        consumers[i].join();
    }

    // Destroy semaphores (not reached in this example)
    sem_destroy(&empty);
    sem_destroy(&full);

    return 0;
}
