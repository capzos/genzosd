  #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

// Bubble sort function
void bubble_sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to print an array
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int n;

    // Input number of integers
    printf("Enter the number of integers: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter the integers: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Fork to create a child process
    pid_t pid = fork();

    if (pid < 0) {
        // Error in fork
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        // Child process
        printf("\nChild process started (PID: %d, Parent PID: %d)\n", getpid(), getppid());
        
        printf("Child process sorting the integers...\n");
        bubble_sort(arr, n); // Sorting in child process
        printf("Sorted integers by child process: ");
        print_array(arr, n);

        printf("Child process sleeping for 5 seconds to become orphan...\n");
        sleep(5); // Sleep to demonstrate orphan state
        printf("Child process completed (Orphan state).\n");
        exit(0);
    } else {
         printf("\nParent process started (PID: %d)\n", getpid());
        
        printf("Parent process sorting the integers...\n");
        bubble_sort(arr, n); // Sorting in parent process
        printf("Sorted integers by parent process: ");
        print_array(arr, n);

        printf("Demonstrating zombie state (child process already terminated)...\n");
        sleep(10); // Allow observation of zombie state before calling wait()

        printf("Parent process waiting for child process to complete...\n");
        wait(NULL); // Wait for the child process to complete
        printf("Parent process completed.\n");
    }

    return 0;
}

