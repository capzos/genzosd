#include <stdio.h>
#include <stdbool.h>

// Function to check if a page is in the frame
bool isInFrame(int frames[], int frameCount, int page) {
    for (int i = 0; i < frameCount; i++) {
        if (frames[i] == page) {
            return true;
        }
    }
    return false;
}

// Function to calculate FIFO page faults
int fifoPageFaults(int ref[], int refCount, int frameCount) {
    int frames[frameCount];
    int front = 0, pageFaults = 0;

    for (int i = 0; i < frameCount; i++) {
        frames[i] = -1; // Initialize frames as empty
    }

    for (int i = 0; i < refCount; i++) {
        if (!isInFrame(frames, frameCount, ref[i])) {
            frames[front] = ref[i];
            front = (front + 1) % frameCount;
            pageFaults++;
        }
    }
    return pageFaults;
}

// Function to calculate LRU page faults
int lruPageFaults(int ref[], int refCount, int frameCount) {
    int frames[frameCount];
    int lastUsed[frameCount];
    int pageFaults = 0;

    for (int i = 0; i < frameCount; i++) {
        frames[i] = -1; // Initialize frames as empty
        lastUsed[i] = -1;
    }

    for (int i = 0; i < refCount; i++) {
        int currentPage = ref[i];
        bool found = false;

        // Check if page is in frame
        for (int j = 0; j < frameCount; j++) {
            if (frames[j] == currentPage) {
                found = true;
                lastUsed[j] = i; // Update last used index
                break;
            }
        }

        if (!found) {
            int lruIndex = 0;

            // Find the least recently used frame
            for (int j = 1; j < frameCount; j++) {
                if (lastUsed[j] < lastUsed[lruIndex]) {
                    lruIndex = j;
                }
            }

            frames[lruIndex] = currentPage;
            lastUsed[lruIndex] = i;
            pageFaults++;
        }
    }
    return pageFaults;
}

// Function to calculate Optimal page faults
int optimalPageFaults(int ref[], int refCount, int frameCount) {
    int frames[frameCount];
    int pageFaults = 0;

    for (int i = 0; i < frameCount; i++) {
        frames[i] = -1; // Initialize frames as empty
    }

    for (int i = 0; i < refCount; i++) {
        int currentPage = ref[i];
        if (!isInFrame(frames, frameCount, currentPage)) {
            int replaceIndex = -1, farthest = i;

            for (int j = 0; j < frameCount; j++) {
                int k;
                for (k = i + 1; k < refCount; k++) {
                    if (frames[j] == ref[k]) {
                        if (k > farthest) {
                            farthest = k;
                            replaceIndex = j;
                        }
                        break;
                    }
                }
                if (k == refCount) { // If page not found in future
                    replaceIndex = j;
                    break;
                }
            }

            if (replaceIndex == -1) {
                replaceIndex = 0; // Replace the first frame
            }

            frames[replaceIndex] = currentPage;
            pageFaults++;
        }
    }
    return pageFaults;
}

int main() {
    int refCount, frameCount;

    // Input reference string and frame count
    printf("Enter the number of pages in the reference string: ");
    scanf("%d", &refCount);

    int ref[refCount];
    printf("Enter the reference string: ");
    for (int i = 0; i < refCount; i++) {
        scanf("%d", &ref[i]);
    }

    printf("Enter the number of frames: ");
    scanf("%d", &frameCount);

    // Calculate page faults for each algorithm
    printf("\nPage faults using FIFO: %d\n", fifoPageFaults(ref, refCount, frameCount));
    printf("Page faults using LRU: %d\n", lruPageFaults(ref, refCount, frameCount));
    printf("Page faults using Optimal: %d\n", optimalPageFaults(ref, refCount, frameCount));

    return 0;
}
