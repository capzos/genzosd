#include <stdio.h>
#include <stdbool.h>

// Function to find if the system is in a safe state
bool isSafe(int processes, int resources, int available[], int max[][resources], int allocation[][resources]) {
    int need[processes][resources];
    int work[resources];
    bool finish[processes];
    int safeSequence[processes];

    // Calculate the Need matrix
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    // Initialize work (copy of available) and finish arrays
    for (int i = 0; i < resources; i++) {
        work[i] = available[i];
    }
    for (int i = 0; i < processes; i++) {
        finish[i] = false;
    }

    // Find the safe sequence
    int count = 0; // Number of processes in the safe sequence
    while (count < processes) {
        bool found = false;

        for (int i = 0; i < processes; i++) {
            if (!finish[i]) { // Process i is not yet finished
                bool canExecute = true;

                // Check if the process can execute
                for (int j = 0; j < resources; j++) {
                    if (need[i][j] > work[j]) {
                        canExecute = false;
                        break;
                    }
                }

                // If the process can execute
                if (canExecute) {
                    // Update work resources
                    for (int j = 0; j < resources; j++) {
                        work[j] += allocation[i][j];
                    }

                    // Add process to safe sequence
                    safeSequence[count++] = i + 1; // Store process index (1-based)
                    finish[i] = true;              // Mark as finished
                    found = true;
                }
            }
        }

        if (!found) {
            // No process can execute in this iteration, hence system is not safe
            printf("The system is not in a safe state.\n");
            return false;
        }
    }

    // If we reach here, the system is safe
    printf("The system is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < processes; i++) {
        printf("%d ", safeSequence[i]);
    }
    printf("\n");
    return true;
}

int main() {
    int processes, resources;

    // Input number of processes and resources
    printf("Enter the number of processes: ");
    scanf("%d", &processes);
    printf("Enter the number of resources: ");
    scanf("%d", &resources);

    int allocation[processes][resources], max[processes][resources], available[resources];

    // Input allocation matrix
    printf("Enter the Allocation matrix (%d x %d):\n", processes, resources);
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Input max matrix
    printf("Enter the Max matrix (%d x %d):\n", processes, resources);
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Input available resources
    printf("Enter the Available resources vector (%d):\n", resources);
    for (int i = 0; i < resources; i++) {
        scanf("%d", &available[i]);
    }

    // Check if the system is in a safe state
    isSafe(processes, resources, available, max, allocation);

    return 0;
}



/*
Enter the number of processes: 5
Enter the number of resources: 3
Enter the available resources:
10
5
7
Enter the maximum resource matrix:
7 3 3
3 2 2
9 0 2
4 2 2
5 3 3


Enter the allocation matrix:
0 1 0
2 0 0
3 0 2
2 1 1
0 0 2
*/