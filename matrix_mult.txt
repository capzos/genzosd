#include <stdio.h>
#include <pthread.h>

#define SIZE 3 // Matrix size (3x3)

// Matrices and Result Matrices
int A[SIZE][SIZE], B[SIZE][SIZE];
int sum[SIZE][SIZE], product[SIZE][SIZE];

// Thread function for matrix addition
void* add_matrices(void* arg) {
    int row = (int)(long)arg; // Directly retrieve row index
    for (int col = 0; col < SIZE; col++) {
        sum[row][col] = A[row][col] + B[row][col];
    }
    return NULL;
}



// Thread function for matrix multiplication
void* multiply_matrices(void* arg) {
    int row = (int)(long)arg; // Directly retrieve row index
    for (int col = 0; col < SIZE; col++) {
        product[row][col] = 0; // Initialize to 0
        for (int k = 0; k < SIZE; k++) {
            product[row][col] += A[row][k] * B[k][col];
        }
    }
    return NULL;
}

int main() {
    pthread_t threads[SIZE];

    // Input matrices
    printf("Enter elements of matrix A (%dx%d):\n", SIZE, SIZE);
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            scanf("%d", &A[i][j]);
        }
    }

    printf("Enter elements of matrix B (%dx%d):\n", SIZE, SIZE);
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            scanf("%d", &B[i][j]);
        }
    }

    // Perform Matrix Addition
    for (int i = 0; i < SIZE; i++) {
        pthread_create(&threads[i], NULL, add_matrices, (void*)(long)i); // Pass row index
    }
    for (int i = 0; i < SIZE; i++) {
        pthread_join(threads[i], NULL);
    }

    // Perform Matrix Multiplication
    for (int i = 0; i < SIZE; i++) {
        pthread_create(&threads[i], NULL, multiply_matrices, (void*)(long)i); // Pass row index
    }
    for (int i = 0; i < SIZE; i++) {
        pthread_join(threads[i], NULL);
    }

    // Display Results
    printf("Matrix Addition Result:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d ", sum[i][j]);
        }
        printf("\n");
    }

    printf("Matrix Multiplication Result:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d ", product[i][j]);
        }
        printf("\n");
    }

    return 0;
}
