#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h> // for sleep function

#define MAX_ITERATIONS 100

pthread_mutex_t rw_mutex;        // To lock readCount
pthread_mutex_t readWriteLock;   // To lock resource access (writers' lock) 
pthread_mutex_t iteration_mutex; // To lock iteration count
int readCount = 0;               // Reader counter
int iterations = 0;              // Total operations counter

void* reader(void* arg) {
    int id = (int)(long)arg;

    while (1) {
        pthread_mutex_lock(&iteration_mutex);
        if (iterations >= MAX_ITERATIONS) {
            pthread_mutex_unlock(&iteration_mutex);
            break;
        }
        iterations++;
        pthread_mutex_unlock(&iteration_mutex);

        // Lock to safely update readCount
        pthread_mutex_lock(&rw_mutex);
        readCount++;
        if (readCount == 1) {
            pthread_mutex_lock(&readWriteLock); // First reader locks the resource
        }
        pthread_mutex_unlock(&rw_mutex);

        // Reading section
        printf("Reader %d is reading...\n", id);
        sleep(1); // Simulate reading

        // Lock to safely update readCount
        pthread_mutex_lock(&rw_mutex);
        readCount--;
        if (readCount == 0) {
            pthread_mutex_unlock(&readWriteLock); // Last reader unlocks the resource
        }
        pthread_mutex_unlock(&rw_mutex);

        // Simulate time before the next read
        sleep(1);
    }

    return NULL;
}

void* writer(void* arg) {
    int id = (int)(long)arg;

    while (1) {
        pthread_mutex_lock(&iteration_mutex);
        if (iterations >= MAX_ITERATIONS) {
            pthread_mutex_unlock(&iteration_mutex);
            break;
        }
        iterations++;
        pthread_mutex_unlock(&iteration_mutex);

        pthread_mutex_lock(&readWriteLock); // Writer locks the resource

        // Writing section
        printf("Writer %d is writing...\n", id);
        sleep(1); // Simulate writing

        pthread_mutex_unlock(&readWriteLock); // Writer unlocks the resource

        // Simulate time before the next write
        sleep(2);
    }

    return NULL;
}

int main() {
    pthread_t r1, r2, w1, w2;
    int r1_id = 1, r2_id = 2, w1_id = 1, w2_id = 2;

    // Initialize mutexes
    pthread_mutex_init(&rw_mutex, NULL);
    pthread_mutex_init(&readWriteLock, NULL);
    pthread_mutex_init(&iteration_mutex, NULL);

    // Create reader and writer threads
    pthread_create(&r1, NULL, reader, (void*)(long)r1_id);
    pthread_create(&r2, NULL, reader, (void*)(long)r2_id);
    pthread_create(&w1, NULL, writer, (void*)(long)w1_id);
    pthread_create(&w2, NULL, writer, (void*)(long)w2_id);

    // Wait for threads to finish
    pthread_join(r1, NULL);
    pthread_join(r2, NULL);
    pthread_join(w1, NULL);
    pthread_join(w2, NULL);

    // Destroy mutexes
    pthread_mutex_destroy(&rw_mutex);
    pthread_mutex_destroy(&readWriteLock);
    pthread_mutex_destroy(&iteration_mutex);

    printf("\nProgram completed %d iterations.\n", MAX_ITERATIONS);
    return 0;
}
