ALL IN ONE
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct {
    int pid;          // Process ID
    int arrival;      // Arrival Time
    int burst;        // Burst Time
    int priority;     // Priority (if applicable)
    int completion;   // Completion Time
    int turnaround;   // Turnaround Time
    int waiting;      // Waiting Time
    int remaining;    // Remaining Time (for preemptive)
} Process;

void calculateTimes(Process processes[], int n) {
    for (int i = 0; i < n; i++) {
        processes[i].turnaround = processes[i].completion - processes[i].arrival;
        processes[i].waiting = processes[i].turnaround - processes[i].burst;
    }
}

void printProcesses(Process processes[], int n) {
    printf("\nPID\tArrival\tBurst\tPriority\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].pid, processes[i].arrival, processes[i].burst,
               processes[i].priority, processes[i].completion,
               processes[i].turnaround, processes[i].waiting);
    }
}

void fcfs(Process processes[], int n) {
    int time = 0;
    for (int i = 0; i < n; i++) {
        if (time < processes[i].arrival) time = processes[i].arrival;
        time += processes[i].burst;
        processes[i].completion = time;
    }
    calculateTimes(processes, n);
}

void sjf(Process processes[], int n) {
    bool completed[n];
    for (int i = 0; i < n; i++) completed[i] = false;

    int time = 0, completedCount = 0;
    while (completedCount < n) {
        int shortest = -1;
        for (int i = 0; i < n; i++) {
            if (!completed[i] && processes[i].arrival <= time) {
                if (shortest == -1 || processes[i].burst < processes[shortest].burst) {
                    shortest = i;
                }
            }
        }
        if (shortest == -1) {
            time++;
        } else {
            time += processes[shortest].burst;
            processes[shortest].completion = time;
            completed[shortest] = true;
            completedCount++;
        }
    }
    calculateTimes(processes, n);
}

void priorityScheduling(Process processes[], int n) {
    bool completed[n];
    for (int i = 0; i < n; i++) completed[i] = false;

    int time = 0, completedCount = 0;
    while (completedCount < n) {
        int highest = -1;
        for (int i = 0; i < n; i++) {
            if (!completed[i] && processes[i].arrival <= time) {
                if (highest == -1 || processes[i].priority < processes[highest].priority) {
                    highest = i;
                }
            }
        }
        if (highest == -1) {
            time++;
        } else {
            time += processes[highest].burst;
            processes[highest].completion = time;
            completed[highest] = true;
            completedCount++;
        }
    }
    calculateTimes(processes, n);
}

void roundRobin(Process processes[], int n, int quantum) {
    int time = 0, completedCount = 0;
    for (int i = 0; i < n; i++) {
        processes[i].remaining = processes[i].burst;
    }

    while (completedCount < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival <= time && processes[i].remaining > 0) {
                if (processes[i].remaining <= quantum) {
                    time += processes[i].remaining;
                    processes[i].remaining = 0;
                    processes[i].completion = time;
                    completedCount++;
                } else {
                    time += quantum;
                    processes[i].remaining -= quantum;
                }
            }
        }
    }
    calculateTimes(processes, n);
}

int main() {
    int n, choice, quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter Arrival Time, Burst Time, and Priority (lower is higher) for Process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival, &processes[i].burst, &processes[i].priority);
    }

    printf("\nSelect CPU Scheduling Algorithm:\n");
    printf("1. First-Come, First-Served (FCFS)\n");
    printf("2. Shortest Job First (SJF)\n");
    printf("3. Priority Scheduling\n");
    printf("4. Round Robin (RR)\n");
    printf("Choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            fcfs(processes, n);
            break;
        case 2:
            sjf(processes, n);
            break;
        case 3:
            priorityScheduling(processes, n);
            break;
        case 4:
            printf("Enter Time Quantum: ");
            scanf("%d", &quantum);
            roundRobin(processes, n, quantum);
            break;
        default:
            printf("Invalid choice!\n");
            return 1;
    }

    printProcesses(processes, n);
    return 0;
}
